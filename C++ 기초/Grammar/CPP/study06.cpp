#include <iostream>

int main()
{
	/*
	C++는 복합데이터형을 제공
	>> 사용자 정의대로 새로운 데이터형을 만들 수 있다.
	복합데이터형 : 기본 정수형과 부동소수점형의 조합
	*/

	/*
	배열(array) : 같은 데이터형의 집합
	typeName arrayName[arrSize];

	타입이름 배열이름[배열 크기]
	*/

	// 배열 요소 출력은 '배열이름[인덱스]로 출력 -> 인덱스는 0부터
	short month[12] = { 1, 2, 3 };
	std::cout << month[0] << std::endl;

	/*
	배열 원소에 대입할 값들을 콤마로 구분하여 중괄호로 묶어 선언

	초기화를 선언 이후 나중에 할 수는 없다.

	배열을 다른 배열에 통째로 대입할 수 없다.
	-> int a[5] = { ... }
	-> int b[12] = { ... }
	-> b = a;

	초기화 값의 개수({1,2}) 를 배열 원소의 개수(arr[5]) 보다 모자라게 제공할 수 있다.
	-> int arr[5] = {1, 2};

	배열을 부분적으로 초기화하면, 나머지 원소들은 모두 0으로 설정
	즉, 명시적으로 첫 번째 원소만 0으로 초기화하면, 나머지 원소들은 모두 0으로 초기화된다.
	-> { ... } 으로 작성해도 모두 0으로 초기화 됨!!

	배열을 초기화할때 대괄호 속을 비워두면 컴파일러가 초기화 값의 개수를 헤아려 배열 원소 개수를 저장한다.
	-> int arr[] = {1, 2, 3, 4};
	-> 컴파일러가 자동으로 int arr[4]로 처리
	*/

	// 쓰레기 값이 출력 -> 4개 짜리 배열이 만들어졌는데 arr[4]에 접근해서
	int arr[] = { 1, 2, 3, 4 };
	std::cout << arr[4] << std::endl;

	return 0;
}


/*
배열 (Array) : 같은 타입의 여러 값을 순서대로 저장하는 집합
구조체 (struct) : 서로 다른 타입도 포함할 수 있는 여러 값을 하나로 묶음
공용체 (union) : 여러 타입 중 하나만 저장하는 공간을 공유
클래스 (class) : 구조체보다 강력한 데이터+함수의 묶음
열거형 (enum) : 이름을 가진 상수들의 집합
*/